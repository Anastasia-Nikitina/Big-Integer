{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BigInteger \u00b6 BigInteger is a calculator of expressions with long ariphmetics. Installation \u00b6 Package can be installed with dotnet by following these steps: Add a source in your NuGet.config file dotnet nuget add source \"https://nuget.pkg.github.com/Anastasia-Nikitina/index.json\" Authorize with your github token paket config add-token \"https://nuget.pkg.github.com/Anastasia-Nikitina/index.json\" <token> Install the package dotnet add PROJECT package BigInteger --version <version>","title":"BigInteger"},{"location":"#biginteger","text":"BigInteger is a calculator of expressions with long ariphmetics.","title":"BigInteger"},{"location":"#installation","text":"Package can be installed with dotnet by following these steps: Add a source in your NuGet.config file dotnet nuget add source \"https://nuget.pkg.github.com/Anastasia-Nikitina/index.json\" Authorize with your github token paket config add-token \"https://nuget.pkg.github.com/Anastasia-Nikitina/index.json\" <token> Install the package dotnet add PROJECT package BigInteger --version <version>","title":"Installation"},{"location":"BigInt/","text":"BigInt \u00b6 BigInt is library of a long arithmetic used in the BigInteger Type \u00b6 Main type of BigInt is NumberWithSign. It consists of sign of Bolean and number of <MyList<int>> . MyList<int> consists of integers from 0 to 9 Functions \u00b6 stringToNWS (str: string) - converts string to NumberWithSign NWSToString (a: NumberWithSign) - converts NumberWithSign to string fstGreaterThanSec (x: MyList<int>) (y: MyList<int>) - returns true if x greater than y else return false addZeros (x: MyList<int>) (y: MyList<int>) - adds zeros to the beginning in x or in y removeZeros (a: MyList<int>) - removes zeros from the beginning transfer (x: MyList<_>) - transfers digits through position goSub (x: MyList<int>) (y: MyList<int>) - subtracts two numbers without sign goSum (x: MyList<_>) (y: MyList<_>) - sums up two numbers without sign multToNum (a: MyList<_>) (n: int) - multiplies number a (without sign) to int n goMult (a: MyList<_>) (b: MyList<_>) - multiplies two numbers without sign subtraction (a: NumberWithSign) (b: NumberWithSign) - returns result of subtraction of two numbers addition (a: NumberWithSign) (b : NumberWithSign) - returns result of addition of two numbers multiplication (a: NumberWithSign) (b: NumberWithSign) - returns result of multiplication of two numbers selection (x: MyList<int>) (y: MyList<int>) - selects the quotient of the division goDiv (x: MyList<_>) (y: MyList<_>) - diviides two numbers without sign goRem (x: MyList<_>) (y: MyList<_>) - finds the remainder of the division of two numbers without sign division (a: NumberWithSign) (b: NumberWithSign) - returns result of division of two numbers remainder (a: NumberWithSign) (b: NumberWithSign) - returns remainder of division of two numbers isEven (a: NumberWithSign) - determines whether the number is even power (n: NumberWithSign) (pow: NumberWithSign) - returns then power of number absNWS (a: NumberWithSign) - returns the absolute value of number unMinus (a: NumberWithSign) - returns the opposite number in sign toBin (x: NumberWithSign) - converts a number to binary","title":"BigInt"},{"location":"BigInt/#bigint","text":"BigInt is library of a long arithmetic used in the BigInteger","title":"BigInt"},{"location":"BigInt/#type","text":"Main type of BigInt is NumberWithSign. It consists of sign of Bolean and number of <MyList<int>> . MyList<int> consists of integers from 0 to 9","title":"Type"},{"location":"BigInt/#functions","text":"stringToNWS (str: string) - converts string to NumberWithSign NWSToString (a: NumberWithSign) - converts NumberWithSign to string fstGreaterThanSec (x: MyList<int>) (y: MyList<int>) - returns true if x greater than y else return false addZeros (x: MyList<int>) (y: MyList<int>) - adds zeros to the beginning in x or in y removeZeros (a: MyList<int>) - removes zeros from the beginning transfer (x: MyList<_>) - transfers digits through position goSub (x: MyList<int>) (y: MyList<int>) - subtracts two numbers without sign goSum (x: MyList<_>) (y: MyList<_>) - sums up two numbers without sign multToNum (a: MyList<_>) (n: int) - multiplies number a (without sign) to int n goMult (a: MyList<_>) (b: MyList<_>) - multiplies two numbers without sign subtraction (a: NumberWithSign) (b: NumberWithSign) - returns result of subtraction of two numbers addition (a: NumberWithSign) (b : NumberWithSign) - returns result of addition of two numbers multiplication (a: NumberWithSign) (b: NumberWithSign) - returns result of multiplication of two numbers selection (x: MyList<int>) (y: MyList<int>) - selects the quotient of the division goDiv (x: MyList<_>) (y: MyList<_>) - diviides two numbers without sign goRem (x: MyList<_>) (y: MyList<_>) - finds the remainder of the division of two numbers without sign division (a: NumberWithSign) (b: NumberWithSign) - returns result of division of two numbers remainder (a: NumberWithSign) (b: NumberWithSign) - returns remainder of division of two numbers isEven (a: NumberWithSign) - determines whether the number is even power (n: NumberWithSign) (pow: NumberWithSign) - returns then power of number absNWS (a: NumberWithSign) - returns the absolute value of number unMinus (a: NumberWithSign) - returns the opposite number in sign toBin (x: NumberWithSign) - converts a number to binary","title":"Functions"},{"location":"Interpreter/","text":"Interpreter \u00b6 The interpreter can be used by both developers and users To developers \u00b6 To interpretate your code, at first you need to create an abstract sytax tree by using the following function Main.parse <string> Then you can run the Interpreter.run <ast> funtion that returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using DrawTree.drawTree <ast> <output file path> Another functions \u00b6 processExpr (vDict: Dictionary<AST.VName,AST.Expression>) (expr: AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict: Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt: AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast: AST.Stmt list) - assisting function to compute a result of code with a single statement Code example \u00b6 let x = \"let x = 13 print x\" let ast = parse x let _, _, pDict = Interpreter.run ast printfn \"%s\" pD.[Interpreter.outputBuffer] Given code prints \"13\" into console To users \u00b6 Run \"BigIntCalc.exe\" from console with following commands: --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file","title":"Interpreter"},{"location":"Interpreter/#interpreter","text":"The interpreter can be used by both developers and users","title":"Interpreter"},{"location":"Interpreter/#to-developers","text":"To interpretate your code, at first you need to create an abstract sytax tree by using the following function Main.parse <string> Then you can run the Interpreter.run <ast> funtion that returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using DrawTree.drawTree <ast> <output file path>","title":"To developers"},{"location":"Interpreter/#another-functions","text":"processExpr (vDict: Dictionary<AST.VName,AST.Expression>) (expr: AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict: Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt: AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast: AST.Stmt list) - assisting function to compute a result of code with a single statement","title":"Another functions"},{"location":"Interpreter/#code-example","text":"let x = \"let x = 13 print x\" let ast = parse x let _, _, pDict = Interpreter.run ast printfn \"%s\" pD.[Interpreter.outputBuffer] Given code prints \"13\" into console","title":"Code example"},{"location":"Interpreter/#to-users","text":"Run \"BigIntCalc.exe\" from console with following commands: --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file","title":"To users"},{"location":"Language/","text":"Language guide \u00b6 BigIntCalc uses simple programming language to define arithmetic expressions Statements \u00b6 Language support following statements: print <vname> let <vname> = <expression> print prints a result of arithmetic expression corresponding to a given variable and let defines a variable <vname> begins with lowercase or uppercase letters of the Latin alphabet, followed by numbers or other letters <expression> can consists of numbers, variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), | Expressions \u00b6 Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression> Operators \u00b6 BigIntCalc support following operators: + - calculates the sum of two expressions - - calculates the difference between two expressions; also calculate the number with opposite sign (unary minus) * - calculates the product of two numbers / - calculates the whole part of the division % - calculates the remainder of the division ^ - calculates the power of number ~ - converts a number to a binary number syste ( expr ) - responsible for prioritizing operation | expr | - calculates the absolute value of the expression Code example \u00b6 let x = |2^3 - 10| * 5 let y = (99 + 1) / 10 let z = x - y print z","title":"Language guide"},{"location":"Language/#language-guide","text":"BigIntCalc uses simple programming language to define arithmetic expressions","title":"Language guide"},{"location":"Language/#statements","text":"Language support following statements: print <vname> let <vname> = <expression> print prints a result of arithmetic expression corresponding to a given variable and let defines a variable <vname> begins with lowercase or uppercase letters of the Latin alphabet, followed by numbers or other letters <expression> can consists of numbers, variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), |","title":"Statements"},{"location":"Language/#expressions","text":"Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression>","title":"Expressions"},{"location":"Language/#operators","text":"BigIntCalc support following operators: + - calculates the sum of two expressions - - calculates the difference between two expressions; also calculate the number with opposite sign (unary minus) * - calculates the product of two numbers / - calculates the whole part of the division % - calculates the remainder of the division ^ - calculates the power of number ~ - converts a number to a binary number syste ( expr ) - responsible for prioritizing operation | expr | - calculates the absolute value of the expression","title":"Operators"},{"location":"Language/#code-example","text":"let x = |2^3 - 10| * 5 let y = (99 + 1) / 10 let z = x - y print z","title":"Code example"},{"location":"MyList/","text":"MyList \u00b6 MyList is the library of non-empty lists which used in BigInt module Type \u00b6 MyList is a discriminated union with One of 't or Cons of 't * MyList<t> Functions \u00b6 stringToMyList (str: string) - converts string to MyList fold (f: 'a -> 'b -> 'a) (acc: int) (l: MyList<_>) - implementation of system fold for MyList length (x: MyList) - returns a length of a list map (f: 'a -> 'b -> 'a) (l: Mylist<_>) - implementation of system map for MyList iter (f: 'a -> 'b -> 'a) (l: Mylist<_>) - implementation of system map for MyList concat (l1: Mylist<_>) (l2: Mylist<_>) - adds l2 to the end of l2 systemToMyList (l: list) - converts system list to MyList myListToSystem (l: MyList<_>) - converts MyList to system list head (l: MyList<_>) - returns the first element of the list tail (l: MyList <_>) - returns a list without first element sort (l: MyList <_>) - returns a sorted list arrayToString (a: array<int>) - converts array to string listToString (l: list) - converts list to string reverse (l: MyList<_>) - returns a list with elements in a reversed order slice (a: MyList<int>) (x1: int) (x2: int) - returns the part of the list from the x1 to the x2 position isEqual (l1: MyList<int>) (l2: MyList<int>) - checks the two lists for equality","title":"MyList"},{"location":"MyList/#mylist","text":"MyList is the library of non-empty lists which used in BigInt module","title":"MyList"},{"location":"MyList/#type","text":"MyList is a discriminated union with One of 't or Cons of 't * MyList<t>","title":"Type"},{"location":"MyList/#functions","text":"stringToMyList (str: string) - converts string to MyList fold (f: 'a -> 'b -> 'a) (acc: int) (l: MyList<_>) - implementation of system fold for MyList length (x: MyList) - returns a length of a list map (f: 'a -> 'b -> 'a) (l: Mylist<_>) - implementation of system map for MyList iter (f: 'a -> 'b -> 'a) (l: Mylist<_>) - implementation of system map for MyList concat (l1: Mylist<_>) (l2: Mylist<_>) - adds l2 to the end of l2 systemToMyList (l: list) - converts system list to MyList myListToSystem (l: MyList<_>) - converts MyList to system list head (l: MyList<_>) - returns the first element of the list tail (l: MyList <_>) - returns a list without first element sort (l: MyList <_>) - returns a sorted list arrayToString (a: array<int>) - converts array to string listToString (l: list) - converts list to string reverse (l: MyList<_>) - returns a list with elements in a reversed order slice (a: MyList<int>) (x1: int) (x2: int) - returns the part of the list from the x1 to the x2 position isEqual (l1: MyList<int>) (l2: MyList<int>) - checks the two lists for equality","title":"Functions"},{"location":"Structure/","text":"Project structure \u00b6 This page contains some information about the project's structure Github repository structure \u00b6 BigInteger \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions setup \u251c\u2500\u2500 docs - site with documentation in .md format \u251c\u2500\u2500 src - main code of the project \u2502 \u2514\u2500\u2500 BigInteger - Interpreter, MyList and BigInt libraries \u251c\u2500\u2500 tests - tests \u2502 \u251c\u2500\u2500 BigInteger.UnitTests - tests for BigInt functions \u2502 \u2514\u2500\u2500 Interpreter.UnitTest - tests for interpreter \u251c\u2500\u2500 fsharplint.json - linter config \u251c\u2500\u2500 mkdocs.yml - MkDocs config \u2514\u2500\u2500 BigInteger.sln - main solution file","title":"Project structure"},{"location":"Structure/#project-structure","text":"This page contains some information about the project's structure","title":"Project structure"},{"location":"Structure/#github-repository-structure","text":"BigInteger \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions setup \u251c\u2500\u2500 docs - site with documentation in .md format \u251c\u2500\u2500 src - main code of the project \u2502 \u2514\u2500\u2500 BigInteger - Interpreter, MyList and BigInt libraries \u251c\u2500\u2500 tests - tests \u2502 \u251c\u2500\u2500 BigInteger.UnitTests - tests for BigInt functions \u2502 \u2514\u2500\u2500 Interpreter.UnitTest - tests for interpreter \u251c\u2500\u2500 fsharplint.json - linter config \u251c\u2500\u2500 mkdocs.yml - MkDocs config \u2514\u2500\u2500 BigInteger.sln - main solution file","title":"Github repository structure"}]}